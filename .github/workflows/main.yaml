name: learn-github-actions
run-name: ${{ github.actor }} is learning GitHub Actions

on:
  pull_request:
    types: [opened, reopened]
    paths:
      - 'containers/**'
    branches:
      - ajcborges-patch-1

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.detect-app.outputs.app_name }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: 🔍 Detect Updated App Names
        id: detect-app
        run: |
          echo "Detecting updated applications under containers/..."
          changed_files=$(git diff --name-only ${{ github.sha }}~1 ${{ github.sha }})
          echo "Changed files: $changed_files"
      
          # Extract unique app names from the 'containers/' directory
          apps=$(echo "$changed_files" | grep '^containers/' | cut -d/ -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
      
          if [[ -z "$apps" ]]; then
            echo "No applications detected. Exiting."
            exit 1
          fi
      
          echo "Detected applications: $apps"
          echo "app_names=$apps" >> $GITHUB_OUTPUT

  authentication:
    name: Authentication
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: 🔐 Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-ci

      - name: 🔑 Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

  # checks:
  #   name: Network Checks
  #   runs-on: ubuntu-latest
  #   needs: authentication

  #   steps:
  #     - name: 🔍 Tailscale Identity
  #       run: |
  #         tailscale status
  #         tailscale whois $(tailscale ip -4)

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: authentication
    env:
      APP_NAME: ${{ needs.prepare.outputs.app_name }}

    steps:
      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.3"

      - name: ⚙️ Terraform Init & Validate
        run: |
          terraform -chdir=containers/${APP_NAME} fmt --recursive
          terraform -chdir=containers/${APP_NAME} init
          terraform -chdir=containers/${APP_NAME} validate

      - name: 📄 Terraform Plan
        run: |
          terraform -chdir=containers/${APP_NAME} plan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: production
    env:
      APP_NAME: ${{ needs.prepare.outputs.app_name }}

    steps:
      - name: 🚀 Terraform Apply
        run: |
          terraform -chdir=containers/${APP_NAME} apply -auto-approve
