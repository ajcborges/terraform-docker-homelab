name: Homelab Build
run-name: "Build (CI) - ${{ github.ref_name }}"

on:
  pull_request:
    types: [opened, reopened, synchronize]  
    paths-ignore:
      - '**/*.md'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  # This job detects changes in the 'containers' directory and sets the changed directories as output.      
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.set-dirs.outputs.changed_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed directories
        id: set-dirs
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          dirs=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep '^containers/' | awk -F/ '{print $1"/"$2}' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "Changed directories: $dirs"

          if [[ "$dirs" == "[]" || -z "$dirs" ]]; then
            echo "No relevant directory changes detected."
            echo 'changed_dirs=[]' >> "$GITHUB_OUTPUT"
          else
            echo "changed_dirs=$dirs" >> "$GITHUB_OUTPUT"
          fi
          
  debug-output:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Raw changed_dirs value:"
          echo "${{ needs.detect-changes.outputs.dirs }}"
      


  plan:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.dirs != '[]' && needs.detect-changes.outputs.dirs != '' && needs.detect-changes.outputs.dirs != null }}
    name: Terraform Plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
      - name: 🧾 Checkout Repo
        uses: actions/checkout@v4
        
      - name: 🔐 Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-ci

      - name: Test SSH Connection
        run: |
          ssh -o "StrictHostKeyChecking no" ajcborges@nightking "
            ls -lsa
          "
          
      - name: 🔑 Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.3"

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: Load dynamic JSON secret
        id: load-json
        run: |
          CONTAINER_DIR=$(basename "${{ matrix.dir }}")
          SECRET_NAME=$(echo "$CONTAINER_DIR" | tr '[:lower:]' '[:upper:]')_APP_ENV_JSON
          echo "Using secret name: $SECRET_NAME"
          if [[ -z "${{ secrets[SECRET_NAME] }}" ]]; then
            echo "Secret $SECRET_NAME not found!"
            exit 1
          fi
          echo "${{ secrets[SECRET_NAME] }}" > app_env.json

      - name: Parse JSON into TF variables
        id: parse-args
        run: |
          VAR_ARGS=""
          for key in $(jq -r 'keys[]' app_env.json); do
            val=$(jq -r --arg k "$key" '.[$k]' app_env.json)
            tfkey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            VAR_ARGS="$VAR_ARGS -var=\"${tfkey}=${val}\""
          done
          echo "TF_VARS=${VAR_ARGS}" >> $GITHUB_ENV


      - name: 📦 Terraform Init
        run: |
          terraform fmt --recursive
          terraform init
          terraform validate

      - name: 📦 Terraform  Plan
        run: |
          terraform plan -out=terraform.tfplan $TF_VARS
          
          
  
