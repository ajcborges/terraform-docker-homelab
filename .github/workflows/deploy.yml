name: Homelab Deploy
run-name: "Deploy (CD) - ${{ github.ref_name }}"

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.set-dirs.outputs.changed_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed directories
        id: set-dirs
        run: |
          # git fetch --depth=2  # fetch enough history to compare
          git fetch --unshallow
          base_ref=${{ github.event.before }}
          echo "Base ref (before): $base_ref"
          
          dirs=$(git diff --name-only $base_ref HEAD | grep '^containers/' | awk -F/ '{print $1"/"$2}' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "Changed directories: $dirs"
      
          if [[ "$dirs" == "[]" || -z "$dirs" ]]; then
            echo "No relevant directory changes detected."
            echo 'changed_dirs=[]' >> "$GITHUB_OUTPUT"
          else
            echo "changed_dirs=$dirs" >> "$GITHUB_OUTPUT"
          fi
          
  debug-output:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Raw changed_dirs value:"
          echo "${{ needs.detect-changes.outputs.dirs }}"

  plan:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.dirs != '[]' && needs.detect-changes.outputs.dirs != '' && needs.detect-changes.outputs.dirs != null }}
    name: Terraform Plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.detect-changes.outputs.dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
      - name: 🧾 Checkout Repo
        uses: actions/checkout@v4
        
      - name: 🔐 Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-ci
          
      - name: 🔑 Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.3.3"

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: Load dynamic JSON secret
        id: load-json
        env:
          APP_ENV_JSON: ${{ secrets.CONTAINER_SECRETS }}
        run: |
          
          if [[ -z "$APP_ENV_JSON" ]]; then
            echo "Secret APP_ENV_JSON is not set or empty."
            exit 1
          fi
      
          echo "$APP_ENV_JSON" | jq empty
          if [[ $? -ne 0 ]]; then
            echo "Secret APP_ENV_JSON is not valid JSON"
            exit 1
          fi
      
          echo "$APP_ENV_JSON" > app_env.json
          echo "Secret loaded and saved to app_env.json"

      - name: Parse JSON into TF variables
        id: parse-args
        run: |
          VAR_ARGS=""
          if [ ! -s app_env.json ]; then
            echo "app_env.json is empty or missing!"
            exit 1
          fi
      
          for key in $(jq -r 'keys[]' app_env.json); do
            val=$(jq -r --arg k "$key" '.[$k]' app_env.json)
            tfkey=$(echo "$key" | tr '[:upper:]' '[:lower:]')

            echo "::add-mask::$val"
            
            VAR_ARGS="$VAR_ARGS -var=${tfkey}=${val}"
          done
      
          echo "TF_VARS=${VAR_ARGS}" >> $GITHUB_ENV
          echo "TF_VARS is set with masked values"

      - name: 📦 Terraform Init
        run: |
          terraform fmt --recursive
          terraform init
          terraform validate

      - name: 📦 Terraform  Plan
        run: |
          terraform plan -out=terraform.tfplan $TF_VARS

      # - name: Set artifact name safe
      #   id: artifact_name
      #   run: |
      #     safe_name="${DIR//\//-}"
      #     echo "artifact_name=$safe_name" >> $GITHUB_OUTPUT
      #   env:
      #     DIR: ${{ matrix.dir }}

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: terraform-plan-${{ steps.artifact_name.outputs.artifact_name }}
      #     path: |
      #       ${{ matrix.dir }}/terraform.tfplan
      #       ${{ matrix.dir }}/.terraform.lock.hcl

          
  apply:
      needs: [ detect-changes, plan ]
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.detect-changes.outputs.dirs != '[]' && needs.detect-changes.outputs.dirs != ''
      name: Terraform Apply
      runs-on: ubuntu-latest
      strategy:
        matrix:
          dir: ${{ fromJson(needs.detect-changes.outputs.dirs) }}
      defaults:
        run:
          working-directory: ${{ matrix.dir }}
      steps:
            
        - name: 🧾 Checkout Repo
          uses: actions/checkout@v4

        - name: 🔐 Connect to Tailscale
          uses: tailscale/github-action@v3
          with:
            oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
            oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
            tags: tag:github-ci
          
        - name: 🔑 Authenticate to GCP
          id: auth
          uses: google-github-actions/auth@v2
          with:
            credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

        - name: 🛠️ Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.3.3"

        # - name: Set artifact name safe
        #   id: artifact_name
        #   run: |
        #     safe_name="${DIR//\//-}"
        #     echo "artifact_name=$safe_name" >> $GITHUB_OUTPUT
        #   env:
        #     DIR: ${{ matrix.dir }}
        
        # - uses: actions/download-artifact@v4
        #   with:
        #     name: terraform-plan-${{ steps.artifact_name.outputs.artifact_name }}
        #     path: ${{ matrix.dir }}

        - name: Run tfsec
          uses: aquasecurity/tfsec-action@v1.0.0

        - name: Load dynamic JSON secret
          id: load-json
          env:
            APP_ENV_JSON: ${{ secrets.CONTAINER_SECRETS }}
          run: |
            
            if [[ -z "$APP_ENV_JSON" ]]; then
              echo "Secret APP_ENV_JSON is not set or empty."
              exit 1
            fi
        
            echo "$APP_ENV_JSON" | jq empty
            if [[ $? -ne 0 ]]; then
              echo "Secret APP_ENV_JSON is not valid JSON"
              exit 1
            fi
        
            echo "$APP_ENV_JSON" > app_env.json
            echo "Secret loaded and saved to app_env.json"
  
        - name: Parse JSON into TF variables
          id: parse-args
          run: |
            VAR_ARGS=""
            if [ ! -s app_env.json ]; then
              echo "app_env.json is empty or missing!"
              exit 1
            fi
        
            PREFIXS="${{ matrix.dir }}"
            PREFIX="${PREFIXS#containers/}"
            echo "PREFIXS=${PREFIX}" 
  
            for key in $(jq -r --arg prefix "$PREFIX" 'keys[] | select(startswith($prefix))' app_env.json); do
              val=$(jq -r --arg k "$key" '.[$k]' app_env.json)
              tfkey=$(echo "$key" | tr '[:upper:]' '[:lower:]')
  
              echo "::add-mask::$val"
              
              VAR_ARGS="$VAR_ARGS -var=${tfkey}=${val}"
            done
        
            echo "TF_VARS=${VAR_ARGS}" >> $GITHUB_ENV
            echo "TF_VARS is set with masked values"
  
        - name: 📦 Terraform Init
          run: |
            terraform fmt --recursive
            terraform init
            terraform validate

        - name: 📦 Terraform  Plan
          run: |
            terraform plan -out=terraform.tfplan $TF_VARS
  
        - name: 🚀 Terraform Apply
          run: terraform apply -auto-approve terraform.tfplan

        - name: Show Terraform Apply Summary
          run: terraform show -no-color
 
